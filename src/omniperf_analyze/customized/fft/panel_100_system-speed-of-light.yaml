---
# Add description/tips for each metric in this section.
# So it could be shown in hover.
Metric Description:
  SALU: &SALU_anchor Scalar Arithmetic Logic Unit

# Define the panel properties and properties of each metric in the panel.
Panel Config:
  id: 100
  title: System Speed-of-Light
  data source:
    - metric_table:
        id: 101
        header:
          metric: Metric
          value: Value
          unit: Unit
          peak: Peak
          pop: PoP
          tips: Tips
        metric:
          # FLOPs:
          #   value:
          #     AVG((((((((64 * (SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16)) + (SQ_INSTS_VALU_MFMA_MOPS_F16
          #     * 512)) + (SQ_INSTS_VALU_MFMA_MOPS_BF16 * 512)) + (64 * (SQ_INSTS_VALU_ADD_F32
          #     + SQ_INSTS_VALU_MUL_F32))) + (SQ_INSTS_VALU_MFMA_MOPS_F32 * 512)) + (64 *
          #     (SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64))) / (EndNs - BeginNs)))
          #   unit: GOPs
          #   peak: ((($sclk * $numCU) * 64) / 1000)
          #   pop:
          #     ((100 * AVG((((((((64 * (SQ_INSTS_VALU_ADD_F16 + SQ_INSTS_VALU_MUL_F16))
          #     + (SQ_INSTS_VALU_MFMA_MOPS_F16 * 512)) + (SQ_INSTS_VALU_MFMA_MOPS_BF16 * 512))
          #     + (64 * (SQ_INSTS_VALU_ADD_F32 + SQ_INSTS_VALU_MUL_F32))) + (SQ_INSTS_VALU_MFMA_MOPS_F32
          #     * 512)) + (64 * (SQ_INSTS_VALU_ADD_F64 + SQ_INSTS_VALU_MUL_F64))) / (EndNs
          #     - BeginNs)))) / ((($sclk * $numCU) * 64)
          #     / 1000))
          #   tips:
          # Int OPs:
          #   value: AVG(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) / (EndNs - BeginNs)))
          #   unit: GOPs
          #   peak: ((($sclk * $numCU) * 64) / 1000)
          #   pop:
          #     ((100 * AVG(((64 * (SQ_INSTS_VALU_INT32 + SQ_INSTS_VALU_INT64)) / (EndNs
          #     - BeginNs)))) / ((($sclk * $numCU) * 64)
          #     / 1000))
          #   tips:
          SALU Util - %:
            value: AVG(((100 * SQ_ACTIVE_INST_SCA) / (GRBM_GUI_ACTIVE * $numCU)))
            unit: pct
            peak: 100
            pop: AVG(((100 * SQ_ACTIVE_INST_SCA) / (GRBM_GUI_ACTIVE * $numCU)))
            tips:
          VALU Util - %:
            value: AVG(((100 * SQ_ACTIVE_INST_VALU) / (GRBM_GUI_ACTIVE * $numCU)))
            unit: pct
            peak: 100
            pop: AVG(((100 * SQ_ACTIVE_INST_VALU) / (GRBM_GUI_ACTIVE * $numCU)))
            tips:
          # MFMA Util - %:
          #   value: AVG(((100 * SQ_VALU_MFMA_BUSY_CYCLES) / ($GRBM_GUI_ACTIVE * $numCU)))
          #   unit: pct
          #   peak: 100
          #   pop: AVG(((100 * SQ_VALU_MFMA_BUSY_CYCLES) / (GRBM_GUI_ACTIVE * $numCU)))
          #   tips:
          Thread Divergence:
            value:
              AVG(((100 * (1 - ((SQ_THREAD_CYCLES_VALU / SQ_ACTIVE_INST_VALU) / 64)))
              if (SQ_ACTIVE_INST_VALU != 0) else None))
            unit: pct
            peak: 100
            pop:
              AVG(((100 * (1 - ((SQ_THREAD_CYCLES_VALU / SQ_ACTIVE_INST_VALU) / 64)))
              if (SQ_ACTIVE_INST_VALU != 0) else None))
            tips:
          Active CUs:
            value: $numActiveCUs
            unit: CUs
            peak: $numCU
            pop: ((100 * $numActiveCUs) / $numCU)
            tips:
          IPC - Issue:
            value:
              AVG(((((((((SQ_INSTS_VALU + SQ_INSTS_VMEM) + SQ_INSTS_SALU) + SQ_INSTS_SMEM)
              + SQ_INSTS_GDS) + SQ_INSTS_EXP) + SQ_INSTS_BRANCH) + SQ_INSTS_SENDMSG) / SQ_ACTIVE_INST_ANY))
            unit: Instr/cycle
            peak: 5
            pop:
              ((100 * AVG(((((((((SQ_INSTS_VALU + SQ_INSTS_VMEM) + SQ_INSTS_SALU) + SQ_INSTS_SMEM)
              + SQ_INSTS_GDS) + SQ_INSTS_EXP) + SQ_INSTS_BRANCH) + SQ_INSTS_SENDMSG) / SQ_ACTIVE_INST_ANY)))
              / 5)
            tips:
          LDS BW:
            value: AVG((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) / (EndNs - BeginNs)))
            unit: GB/sec
            peak: ($sclk * $numCU)
            pop:
              AVG(((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) / (EndNs - BeginNs))
              / ($sclk * $numCU)))
            tips:
          LDS Bank Conflict:
            value:
              AVG(((SQ_LDS_BANK_CONFLICT / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else 0))
            unit: Conflicts/access
            peak: 64
            pop:
              AVG((((SQ_LDS_BANK_CONFLICT * 1.5625) / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else 0))
            tips:
          Wave Occupancy:
            value: AVG((SQ_ACCUM_PREV_HIRES / GRBM_GUI_ACTIVE))
            unit: Wavefronts
            peak: ($maxWavesPerCU * $numCU)
            pop:
              (100 * AVG(((SQ_ACCUM_PREV_HIRES / GRBM_GUI_ACTIVE) / ($maxWavesPerCU
              * $numCU))))
            tips:
          Wave Occupancy per ActiveCU:
            value: AVG(((SQ_ACCUM_PREV_HIRES / GRBM_GUI_ACTIVE) / $numCU))
            unit: Wavefronts
            peak: $maxWavesPerCU
            pop:
              ((100 * AVG(((SQ_ACCUM_PREV_HIRES / GRBM_GUI_ACTIVE) / $numCU)))
              / $maxWavesPerCU)
            tips:
          Instr Fetch BW:
            value: AVG(((SQ_IFETCH / (EndNs - BeginNs)) * 32))
            unit: GB/s
            peak: ((($sclk / 1000) * 32) * $numSQC)
            pop: ((100 * AVG(((SQ_IFETCH / (EndNs - BeginNs)) * 32))) / ($numSQC
              * (($sclk / 1000) * 32)))
            tips:
          TD Busy:
            value: AVG(((100 * TD_TD_BUSY_sum) / (GRBM_GUI_ACTIVE * $numCU)))
            unit: pct
            peak: 100
            pop: AVG(((100 * TD_TD_BUSY_sum) / (GRBM_GUI_ACTIVE * $numCU)))
            tips:
          TC2TD Stall:
            value: AVG(((100 * TD_TC_STALL_sum) / (GRBM_GUI_ACTIVE * $numCU)))
            unit: pct
            peak: 100
            pop: AVG(((100 * TD_TC_STALL_sum) / (GRBM_GUI_ACTIVE * $numCU)))
            tips:
          Instr Cache BW:
            value: AVG(((SQC_ICACHE_REQ / (EndNs - BeginNs)) * 64))
            unit: GB/s
            peak: ((($sclk / 1000) * 64) * $numSQC)
            pop:
              ((100 * AVG(((SQC_ICACHE_REQ / (EndNs - BeginNs)) * 64))) / ((($sclk
              / 1000) * 64) * $numSQC))
            tips:
          Instr Cache Hit Rate:
            value: AVG(((100 * SQC_ICACHE_HITS) / (SQC_ICACHE_HITS + SQC_ICACHE_MISSES)))
            unit: pct
            peak: 100
            pop: AVG(((100 * SQC_ICACHE_HITS) / (SQC_ICACHE_HITS + SQC_ICACHE_MISSES)))
            tips:
          Const Cache BW:
            value: AVG(((SQC_DCACHE_REQ / (EndNs - BeginNs)) * 64))
            unit: GB/s
            peak: ((($sclk / 1000) * 64) * $numSQC)
            pop:
              ((100 * AVG(((SQC_DCACHE_REQ / (EndNs - BeginNs)) * 64))) / ((($sclk
              / 1000) * 64) * $numSQC))
            tips:
          Const Cache Hit Rate:
            value:
              AVG((((100 * SQC_DCACHE_HITS) / (SQC_DCACHE_HITS + SQC_DCACHE_MISSES))
              if ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES) != 0) else None))
            unit: pct
            peak: 100
            pop:
              AVG((((100 * SQC_DCACHE_HITS) / (SQC_DCACHE_HITS + SQC_DCACHE_MISSES))
              if ((SQC_DCACHE_HITS + SQC_DCACHE_MISSES) != 0) else None))
            tips:
          L1 Cache BW:
            value: AVG(((TCP_TOTAL_CACHE_ACCESSES_sum * 64) / (EndNs - BeginNs)))
            unit: GB/s
            peak: ((($sclk / 1000) * 64) * $numCU)
            pop:
              ((100 * AVG(((TCP_TOTAL_CACHE_ACCESSES_sum * 64) / (EndNs - BeginNs))))
              / ((($sclk / 1000) * 64) * $numCU))
            tips:
          L1 Cache Hit Rate:
            value:
              AVG((((100 * TCP_TOTAL_HIT_LRU_READ_sum) / TCP_TOTAL_ACCESSES_sum) if
              (TCP_TOTAL_ACCESSES_sum != 0) else None))
            unit: pct
            peak: 100
            pop:
              AVG((((100 * TCP_TOTAL_HIT_LRU_READ_sum) / TCP_TOTAL_ACCESSES_sum) if (TCP_TOTAL_ACCESSES_sum
              != 0) else None))
            tips:
          L2 Cache Hit Rate:
            value:
              AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else None))
            unit: pct
            peak: 100
            pop:
              AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else None))
            tips:
          L2-EA Read BW:
            value:
              AVG((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / (EndNs - BeginNs)))
            unit: GB/s
            peak: $hbmBW
            pop:
              ((100 * AVG((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / (EndNs - BeginNs)))) / $hbmBW)
            tips:
          L2-EA Write BW:
            value:
              AVG((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / (EndNs - BeginNs)))
            unit: GB/s
            peak: $hbmBW
            pop:
              ((100 * AVG((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / (EndNs - BeginNs)))) / $hbmBW)
            tips:
          L2-EA Read Latency:
            value:
              AVG(((((TCC_EA_RDREQ_LEVEL_sum / TCC_EA_RDREQ_sum) * 1000) / $sclk)
              if (TCC_EA_RDREQ_sum != 0) else None))
            unit: Nanosec
            peak:
            pop:
            tips:
          L2-EA Write Latency:
            value:
              AVG(((((TCC_EA_WRREQ_LEVEL_sum / TCC_EA_WRREQ_sum) * 1000) / $sclk)
              if (TCC_EA_WRREQ_sum != 0) else None))
            unit: Nanosec
            peak:
            pop:
            tips:

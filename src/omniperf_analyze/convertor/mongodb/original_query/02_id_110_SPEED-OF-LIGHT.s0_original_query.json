[
    {"$match": {
        "Index": { "$in": [${DispatchIDFilter:raw}] },
        "gpu-id": { "$in": [${gpuFilter:raw}] },
        "KernelName": { "$in": ${KernelNameFilter:json}}
      }},
      {"$group": {
          "_id": null,
          "valu_flops_val": {
            "$avg": { "$divide": [ { "$add": [
              { "$multiply": [64, { "$add": ["&SQ_INSTS_VALU_ADD_F16", "&SQ_INSTS_VALU_MUL_F16", "&SQ_INSTS_VALU_TRANS_F16", { "$multiply": [2, "&SQ_INSTS_VALU_FMA_F16"] }] }] },
              { "$multiply": [64, { "$add": ["&SQ_INSTS_VALU_ADD_F32", "&SQ_INSTS_VALU_MUL_F32", "&SQ_INSTS_VALU_TRANS_F32", { "$multiply": [2, "&SQ_INSTS_VALU_FMA_F32"] }] }] },
              { "$multiply": [64, { "$add": ["&SQ_INSTS_VALU_ADD_F64", "&SQ_INSTS_VALU_MUL_F64", "&SQ_INSTS_VALU_TRANS_F64", { "$multiply": [2, "&SQ_INSTS_VALU_FMA_F64"] }] }] }
            ]}
            ,{ "$subtract": ["&EndNs", "&BeginNs"] }]
          }},
    
          "valu_intOps_val": {
            "$avg": { "$divide": [{ "$multiply": [64, { "$add": ["&SQ_INSTS_VALU_INT32", "&SQ_INSTS_VALU_INT64"] }] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }
          },
    
          "mfma_flops_f16_val": { "$avg": { "$divide": [{ "$multiply": ["&SQ_INSTS_VALU_MFMA_MOPS_F16", 512] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }  },
          "mfma_flops_bf16_val": { "$avg": { "$divide": [{ "$multiply": ["&SQ_INSTS_VALU_MFMA_MOPS_BF16", 512] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }  },
          "mfma_flops_f32_val": { "$avg": { "$divide": [{ "$multiply": ["&SQ_INSTS_VALU_MFMA_MOPS_F32", 512] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }  },
          "mfma_flops_f64_val": { "$avg": { "$divide": [{ "$multiply": ["&SQ_INSTS_VALU_MFMA_MOPS_F64", 512] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }  },
          "mfma_flops_i8_val": { "$avg": { "$divide": [{ "$multiply": ["&SQ_INSTS_VALU_MFMA_MOPS_I8", 512] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }  },
    
    
          "salu_val": {
              "$avg": { "$divide": [{ "$multiply": [100, "&SQ_ACTIVE_INST_SCA"] }, { "$multiply": ["&GRBM_GUI_ACTIVE", $numCU] }] }
          },
    
          "valu_val": {
              "$avg": { "$divide": [{ "$multiply": [100, "&SQ_ACTIVE_INST_VALU"] }, { "$multiply": ["&GRBM_GUI_ACTIVE", $numCU] }] }
          },
    
          "mfma_val": {
              "$avg": { "$divide": [{ "$multiply": [100, "&SQ_VALU_MFMA_BUSY_CYCLES"] }, { "$multiply": ["&GRBM_GUI_ACTIVE", $numCU, 4] }] }
          },

    
          "lds_bconf": {
            "$avg": {"$cond": [ {"$ne": [{"$subtract": ["&SQ_LDS_IDX_ACTIVE", "&SQ_LDS_BANK_CONFLICT"]}, 0]},
                                {"$divide": [
                                    "&SQ_LDS_BANK_CONFLICT",
                                    {"$subtract": ["&SQ_LDS_IDX_ACTIVE", "&SQ_LDS_BANK_CONFLICT"]}
                                ]},
                                null
                              ]
                    }     
          },
    
   
          "lds_bw":  {
            "$avg": {"$divide":[ 
                        { "$multiply": [ { "$subtract": ["&SQ_LDS_IDX_ACTIVE", "&SQ_LDS_BANK_CONFLICT"]},  
                                            4,  
                                            {"$toInt": "$L2Banks"}
                                        ]}, 
                        {"$subtract": ["&EndNs", "&BeginNs"]}
                    ]}
         },
    
          "lds_bw_pop":  {
            "$avg":     {"$divide": [
                            {"$divide":[ 
                                { "$multiply": [ { "$subtract": ["&SQ_LDS_IDX_ACTIVE", "&SQ_LDS_BANK_CONFLICT"]},  
                                                    4,  
                                                    {"$toInt": "$L2Banks"}
                                                ]}, 
                                {"$subtract": ["&EndNs", "&BeginNs"]}
                            ]},            
                             {"$multiply": [$sclk, $numCU, 0.00128]}
                         ]}
         },
    
          "unpredthreads_val": {
              "$avg": {
                  "$cond": [
                      {"$ne":["&SQ_ACTIVE_INST_VALU" , 0]},
                      { "$divide": ["&SQ_THREAD_CYCLES_VALU", "&SQ_ACTIVE_INST_VALU"] },
                      null
                  ]
              }
          },
    
          "ipcIssue_val": {
              "$avg": { "$divide": [{ "$add": ["&SQ_INSTS_VALU", "&SQ_INSTS_VMEM", "&SQ_INSTS_SALU", "&SQ_INSTS_SMEM", "&SQ_INSTS_GDS", "&SQ_INSTS_BRANCH", "&SQ_INSTS_SENDMSG", "&SQ_INSTS_VSKIPPED"] }, "&SQ_ACTIVE_INST_ANY"] }
          },
          "eaWriteLat_val": {
            "$avg": {
                "$cond": [
                  {"$ne": ["&TCC_EA_WRREQ_sum" , 0]},
                  { "$divide": ["&TCC_EA_WRREQ_LEVEL_sum", "&TCC_EA_WRREQ_sum"] },
                  null                        
                ]
            }
            },
            "eaReadLat_val": {
                "$avg": {
                    "$cond": [
                      {"$ne": ["&TCC_EA_RDREQ_sum" , 0]},
                      { "$divide": ["&TCC_EA_RDREQ_LEVEL_sum", "&TCC_EA_RDREQ_sum"] },
                      null                        
                    ]
                }
            },
            "eaWriteBW_val": {
                "$avg": { "$divide": [{ "$add": [{ "$multiply": ["&TCC_EA_WRREQ_64B_sum", 64] }, { "$multiply": [{ "$subtract": ["&TCC_EA_WRREQ_sum", "&TCC_EA_WRREQ_64B_sum"] }, 32] }] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }
            }, 
            "eaReadBW_val": {
                "$avg": { "$divide": [{ "$add": [{ "$multiply": ["&TCC_EA_RDREQ_32B_sum", 32] }, { "$multiply": [{ "$subtract": ["&TCC_EA_RDREQ_sum", "&TCC_EA_RDREQ_32B_sum"] }, 64] }] }, { "$subtract": ["&EndNs", "&BeginNs"] }] }
            },
            "l2_cacheHits_val": {
                "$avg": {
                    "$cond": [
                        {"$ne": [{ "$add": ["&TCC_HIT_sum", "&TCC_MISS_sum"] }, 0]},
                        { "$divide": [{ "$multiply": [100, "&TCC_HIT_sum"] }, { "$add": ["&TCC_HIT_sum", "&TCC_MISS_sum"] }] },
                        null                          
                    ]
                }
            },
            "vecl1_cacheHits_val": {
                "$avg":  {
                    "$cond": [
                        {"$ne": ["&TCP_TOTAL_CACHE_ACCESSES_sum", 0]},
                        { "$subtract": [100, { "$divide": [{ "$multiply": [100, { "$add": ["&TCP_TCC_READ_REQ_sum", "&TCP_TCC_WRITE_REQ_sum", "&TCP_TCC_ATOMIC_WITH_RET_REQ_sum", "&TCP_TCC_ATOMIC_WITHOUT_RET_REQ_sum"] }]  }, "&TCP_TOTAL_CACHE_ACCESSES_sum"] }] },
                        null
                    ]
                }
            },
            "vecl1_BW_val": {
                "$avg": { "$divide": [{ "$multiply": ["&TCP_TOTAL_CACHE_ACCESSES_sum", 64 ] }, { "$subtract": ["&EndNs", "&BeginNs"] } ] }
            },
            "l1k_cacheHits_val": {
                "$avg": {
                    "$cond": [
                        {"$ne": [{ "$add": ["&SQC_DCACHE_HITS", "&SQC_DCACHE_MISSES"]} , 0]},
                        { "$divide": [{ "$multiply": [100, "&SQC_DCACHE_HITS"] }, { "$add": ["&SQC_DCACHE_HITS", "&SQC_DCACHE_MISSES"]}] },
                        null
                    ]
                }
            },
            "l1i_hitRate_val": {
                "$avg": { "$divide": [{ "$multiply": [100, "&SQC_ICACHE_HITS"] }, { "$add": ["&SQC_ICACHE_HITS", "&SQC_ICACHE_MISSES"]}] }
            },
            "l1i_BW_val": {
                "$avg": { "$multiply": [{ "$divide": ["&SQC_ICACHE_REQ",{ "$subtract": ["&EndNs", "&BeginNs"] } ] }, 64] }
            },
            "l1k_BW_val": {
                "$avg": { "$multiply": [{ "$divide": ["&SQC_DCACHE_REQ", { "$subtract": ["&EndNs", "&BeginNs"] } ] }, 64] }
            }
            
        }},
      {"$set": {
        "array": [
            {
              "Metric": "VALU FLOPs",
              "Value": "&valu_flops_val",
              "Unit": "GFLOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 64, 2 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&valu_flops_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 64, 2 ]}, 1000] }]
              }
            },
            {
              "Metric": "VALU IOPs",
              "Value": "&valu_intOps_val",
              "Unit": "GIOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 64, 2 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&valu_intOps_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 64, 2 ]}, 1000] }]
              }
            },
            {
              "Metric": "MFMA FLOPs (BF16)",
              "Value": "&mfma_flops_bf16_val",
              "Unit": "GFLOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 512 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&mfma_flops_bf16_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 512 ]}, 1000] }]
              }
            },
            {
              "Metric": "MFMA FLOPs (F16)",
              "Value": "&mfma_flops_f16_val",
              "Unit": "GFLOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 1024 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&mfma_flops_f16_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 1024 ]}, 1000] }]
              }
            },
            {
              "Metric": "MFMA FLOPs (F32)",
              "Value": "&mfma_flops_f32_val",
              "Unit": "GFLOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 256 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&mfma_flops_f32_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 256 ]}, 1000] }]
              }
            },
            {
              "Metric": "MFMA FLOPs (F64)",
              "Value": "&mfma_flops_f64_val",
              "Unit": "GFLOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 256 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&mfma_flops_f64_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 256 ]}, 1000] }]
              }
            },
            {
              "Metric": "MFMA IOPs (Int8)",
              "Value": "&mfma_flops_i8_val",
              "Unit": "GIOP",
              "peak": { "$divide": [{ "$multiply": [$sclk, $numCU, 1024 ]}, 1000] },
              "Percent of Peak - PoP": {
                "$divide": [{ "$multiply": [100, "&mfma_flops_i8_val"] }, { "$divide": [{ "$multiply": [$sclk, $numCU, 1024 ]}, 1000] }]
              }
            },
            {
              "Metric": "Active CUs",
              "Value": $numActiveCUs,
              "Unit": "CUs",
              "peak": $numCU,
              "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, $numActiveCUs] }, $numCU]}
            },
    
            {
              "Metric": "SALU Util",
              "Value": "&salu_val",
              "Unit": "pct",
              "peak": 100,
              "Percent of Peak - PoP": "&salu_val"
            },
            {
              "Metric": "VALU Util",
              "Value": "&valu_val",
              "Unit": "pct",
              "peak": 100,
              "Percent of Peak - PoP": "&valu_val"
            },
            {
              "Metric": "MFMA Util",
              "Value": "&mfma_val",
              "Unit": "pct",
              "peak": 100,
              "Percent of Peak - PoP": "&mfma_val"
            },
            {
              "Metric": "VALU Active Threads/Wave",
              "Value": "&unpredthreads_val",
              "Unit": "Threads",
              "peak": 64,
              "Percent of Peak - PoP": { "$multiply": ["&unpredthreads_val", 1.5625]}
            },
            {
              "Metric": "IPC - Issue",
              "Value": "&ipcIssue_val",
              "Unit": "Instr/cycle",
              "peak": 5,
              "Percent of Peak - PoP": {"$divide": [{ "$multiply": [100, "&ipcIssue_val"] }, 5] }
            },
            {
              "Metric": "LDS BW",
              "Value": "&lds_bw",
              "Unit": "GB/sec",
              "peak": {"$multiply": [$sclk, $numCU, 0.128]},
              "Percent of Peak - PoP": "&lds_bw_pop"
            },
            {
              "Metric": "LDS Bank Conflict",
              "Value": "&lds_bconf",
              "Unit": "Conflicts/access",
              "peak": "32",
              "Percent of Peak - PoP": {"$divide": [{ "$multiply": [100, "&lds_bconf"] }, 32] }
            },
            {
                "Metric": "Instr Cache Hit Rate",
                "Value": "&l1i_hitRate_val",
                "Unit": "pct",
                "peak": "100",
                "Percent of Peak - PoP": "&l1i_hitRate_val"
            }, 
            {
                "Metric": "Instr Cache BW",
                "Value": "&l1i_BW_val",
                "Unit": "GB/s",
                "peak": { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numSQC]},
                "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, "&l1i_BW_val"] }, { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numSQC]}] }
            },
            {
                "Metric": "Scalar L1D Cache Hit Rate",
                "Value": "&l1k_cacheHits_val",
                "Unit": "pct",
                "peak": "100",
                "Percent of Peak - PoP": "&l1k_cacheHits_val"
            },
            {
                "Metric": "Scalar L1D Cache BW",
                "Value": "&l1k_BW_val",
                "Unit": "GB/s",
                "peak": { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numSQC]},
                "Percent of Peak - PoP":  { "$divide": [{ "$multiply": [100, "&l1k_BW_val"] }, { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numSQC]}] }
            },

            {
                "Metric": "Vector L1D Cache Hit Rate",
                "Value": "&vecl1_cacheHits_val",
                "Unit": "pct",
                "peak": "100",
                "Percent of Peak - PoP": "&vecl1_cacheHits_val"
            },
            {
                "Metric": "Vector L1D Cache BW",
                "Value": "&vecl1_BW_val",
                "Unit": "GB/s",
                "peak": { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numCU]},
                "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, "&vecl1_BW_val"] }, { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 64] }, $numCU]}] }
            },
            {
                "Metric": "L2 Cache Hit Rate",
                "Value": "&l2_cacheHits_val",
                "Unit": "pct",
                "peak": "100",
                "Percent of Peak - PoP": "&l2_cacheHits_val"
            },
            {
                "Metric": "L2-Fabric Read BW",
                "Value": "&eaReadBW_val",
                "Unit": "GB/s",
                "peak": "$hbmBW",
                "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, "&eaReadBW_val"] }, $hbmBW] }
            },
            {
                "Metric": "L2-Fabric Write BW",
                "Value": "&eaWriteBW_val",
                "Unit": "GB/s",
                "peak": "$hbmBW",
                "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, "&eaWriteBW_val"] }, $hbmBW] }
            },
            {
                "Metric": "L2-Fabric Read Latency",
                "Value": "&eaReadLat_val",
                "Unit": "Cycles",
                "peak": "",
                "Percent of Peak - PoP": ""
            },
            {
                "Metric": "L2-Fabric Write Latency",
                "Value": "&eaWriteLat_val",
                "Unit": "Cycles",
                "peak": "",
                "Percent of Peak - PoP": ""
            }

          ]
      }},
      {"$unwind": {
        "path": "&array"
      }},
      {"$replaceRoot": {
        "newRoot": "&array"
      }},
      {"$unionWith": {
            "coll": "SQ_LEVEL_WAVES",
            "pipeline": [
                {"$match": {
                    "Index": { "$in": [${DispatchIDFilter:raw}] },
                    "gpu-id": { "$in": [${gpuFilter:raw}] },
                    "KernelName": { "$in": ${KernelNameFilter:json}}
                }},
    
                {"$group": {
                    "_id": null,
                    "waveOcc_val": {
                        "$avg": { "$divide": ["&SQ_ACCUM_PREV_HIRES", "&GRBM_GUI_ACTIVE"] }
                    },
                    "waveOcc_pop": {
                        "$avg": { "$divide": [{ "$divide": ["&SQ_ACCUM_PREV_HIRES", "&GRBM_GUI_ACTIVE"] },{ "$multiply": [$maxWavesPerCU, $numCU] }] }
                    }

                }},
                {"$set": {
                    "array": [
                        {
                            "Metric": "Wave Occupancy",
                            "Value": "&waveOcc_val",
                            "Unit": "Wavefronts",
                            "peak": { "$multiply": [$maxWavesPerCU, $numCU] },
                            "Percent of Peak - PoP": { "$multiply": [100, "&waveOcc_pop"] }
                        }
                    ]
                }},
                {"$unwind": {
                    "path": "&array"
                }},
                {"$replaceRoot": {
                    "newRoot": "&array"
                }}

            ]
        }},
        {"$unionWith": {
            "coll": "SQ_IFETCH_LEVEL",
            "pipeline": [
                {"$match": {
                    "Index": { "$in": [${DispatchIDFilter:raw}] },
                    "gpu-id": { "$in": [${gpuFilter:raw}] },
                    "KernelName": { "$in": ${KernelNameFilter:json}}
                }},
    
                {"$group": {
                    "_id": null,
                    "instrFetchBW_val": {
                        "$avg": { "$multiply": [{ "$divide": ["&SQ_IFETCH", { "$subtract": ["&EndNs", "&BeginNs"] }] }, 32] }
                    },
                    "instrFetchLat_val": {
                        "$avg": { "$divide": ["&SQ_ACCUM_PREV_HIRES", "&SQ_IFETCH"] }
                    }
                }},

                {"$set": {
                    "array": [
                        {
                            "Metric": "Instr Fetch BW",
                            "Value": "&instrFetchBW_val",
                            "Unit": "GB/s",
                            "peak": { "$multiply": [ { "$multiply": [{ "$divide": [$sclk, 1000] }, 32] }, $numSQC]},
                            "Percent of Peak - PoP": { "$divide": [{ "$multiply": [100, "&instrFetchBW_val"]}, { "$multiply": [$numSQC, { "$multiply": [{ "$divide": [$sclk, 1000] }, 32] }] }] }
                        },
                        {
                            "Metric": "Instr Fetch Latency",
                            "Value": "&instrFetchLat_val",
                            "Unit": "Cycles",
                            "peak": "",
                            "Percent of Peak - PoP": ""

                        }

                    ]
                }},
                {"$unwind": {
                    "path": "&array"
                }},
                {"$replaceRoot": {
                    "newRoot": "&array"
                }}

            ]
        }}

    ]